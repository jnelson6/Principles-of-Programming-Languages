
(* Add Last exercise *)

let l1 = { head <= 0; size <= 0} (* 0 in head signals null *)
in 

let add_last = proc (l) { proc (x) {
  let new_node = {data <= x; next <= 0} in
  if zero?(l.size) then 
    begin 
      l.head <= new_node; 
      l.size <= 1
    end 
  else
    letrec helper(node) = 
      if number?(node.next) then 
        node.next <= new_node
      else 
        (helper node.next)
    in
    begin 
      (helper l.head); 
      l.size <= l.size + 1
    end
}}

in 

begin
  ((add_last l1) 2);
  ((add_last l1) 3);
  ((add_last l1) 4);
  debug(l1)  (* required inspect the list *)
end